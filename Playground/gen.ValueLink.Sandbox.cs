// <auto-generated/>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Arc.Collections;
using Arc.Threading;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;
using ValueLink;
using ValueLink.Integrality;

#nullable enable
#pragma warning disable CS0169
#pragma warning disable CS1591

namespace Sandbox;

public partial class JournalData : IValueLinkObjectInternal<JournalData.GoshujinClass, JournalData>
{
    public partial class GoshujinClass : IGoshujin<JournalData>, IEnumerable, IEnumerable<JournalData>, ITinyhandSerializable<Sandbox.JournalData.GoshujinClass>, ITinyhandReconstructable<Sandbox.JournalData.GoshujinClass>, ITinyhandCloneable<Sandbox.JournalData.GoshujinClass>, ITinyhandSerializable, IStructualObject
    {
        public GoshujinClass()
        {
            this.IdChain = new(this, static x => x.__gen_cl_identifier__002, static x => ref x.IdLink);
        }

        public void Add(JournalData x) => x.Goshujin = this;
        public bool Remove(JournalData x) => ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.RemoveFromGoshujin(x, this);
        public void Clear() => ((IGoshujin)this).ClearInternal();
        void IGoshujin.ClearInternal()
        {
            this.IdChain.Clear();
        }
        IEnumerable IGoshujin.GetEnumerableInternal() => this.IdChain;

        public UnorderedChain<int, JournalData> IdChain { get; }

        IEnumerator<JournalData> IEnumerable<JournalData>.GetEnumerator() => this.IdChain.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.IdChain.GetEnumerator();
        public int Count => this.IdChain.Count;

        static void ITinyhandSerializable<Sandbox.JournalData.GoshujinClass>.Serialize(ref TinyhandWriter writer, scoped ref Sandbox.JournalData.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (v == null)
            {
                writer.WriteNil();
                return;
            }

            var number = 0;
            JournalData[] array;
            var max = v.IdChain.Count;
            array = new JournalData[max];
            foreach (var x in v.IdChain)
            {
                array[number] = x;
                x.__gen_cl_identifier__001 = number++;
            }

            writer.WriteArrayHeader(2);

            writer.WriteMapHeader(1);
            writer.WriteString("IdChain"u8);
            writer.WriteArrayHeader(v.IdChain.Count);
            foreach (var x in v.IdChain)
            {
                writer.Write(x.__gen_cl_identifier__001);
            }

            writer.WriteArrayHeader(number);
            var formatter = options.Resolver.GetFormatter<JournalData>();
            foreach (var x in array)
            {
                formatter.Serialize(ref writer, x, options);
            }
        }

        static void ITinyhandSerializable<Sandbox.JournalData.GoshujinClass>.Deserialize(ref TinyhandReader reader, scoped ref Sandbox.JournalData.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return;
            }

            v ??= new();
            var length = reader.ReadArrayHeader();
            if (length < 2) throw new TinyhandException("ValueLink");

            var chainsReader = reader.Fork();
            reader.Skip();
            var max = reader.ReadArrayHeader();
            var array = new JournalData[max];
            options.Security.DepthStep(ref reader);
            try
            {
                var formatter = options.Resolver.GetFormatter<JournalData>();
                for (var n = 0; n < max; n++)
                {
                    array[n] = formatter.Deserialize(ref reader, options)!;
                    array[n].__gen_cl_identifier__002 = v;
                }
            }
            finally { reader.Depth--; }

            var readIdChain = false;

            var numberOfData = chainsReader.ReadMapHeader2();
            while (numberOfData-- > 0)
            {
                ulong key;
                var utf8 = chainsReader.ReadStringSpan();
                if (utf8.Length == 0)
                {
                    goto SkipLabel;
                }
                key = global::Arc.Visceral.AutomataKey.GetKey(ref utf8);
                if (utf8.Length != 0) goto SkipLabel;
                if (key != 0x6E696168436449) goto SkipLabel;
                readIdChain = true;
                var len = chainsReader.ReadArrayHeader();
                v.IdChain.Clear();
                for (var n = 0; n < len; n++)
                {
                    var i = chainsReader.ReadInt32();
                    if (i >= max) throw new IndexOutOfRangeException();
                    var x = array[i];
                    v.IdChain.Add(x.Id, x);
                }
                continue;
SkipLabel:
                chainsReader.Skip();
            }

            if (!readIdChain)
            {
                for (var n = 0; n < max; n++)
                {
                    var x = array[n];
                    v.IdChain.Add(x.Id, x);
                }
            }
        }

        static void ITinyhandReconstructable<Sandbox.JournalData.GoshujinClass>.Reconstruct([NotNull] scoped ref Sandbox.JournalData.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            v ??= new Sandbox.JournalData.GoshujinClass();
        }

        static Sandbox.JournalData.GoshujinClass? ITinyhandCloneable<Sandbox.JournalData.GoshujinClass>.Clone(scoped ref Sandbox.JournalData.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            return v == null ? null : TinyhandSerializer.Deserialize<Sandbox.JournalData.GoshujinClass>(TinyhandSerializer.Serialize(v));
        }

        void ITinyhandSerializable.Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        { var rt = this; TinyhandSerializer.DeserializeObject(ref reader, ref rt, options); }
        void ITinyhandSerializable.Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
          => TinyhandSerializer.SerializeObject(ref writer, this, options);

        [IgnoreMember] public IStructualRoot? StructualRoot { get; set; }
        [IgnoreMember] IStructualObject? IStructualObject.StructualParent { get; set; }
        [IgnoreMember] int IStructualObject.StructualKey { get; set; } = -1;
        bool IStructualObject.ProcessJournalRecord(ref TinyhandReader reader)
        {
            if (!reader.TryReadJournalRecord(out JournalRecord record)) return false;
            if (record == JournalRecord.Locator)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is IStructualObject obj)
                {
                    return obj.ProcessJournalRecord(ref reader);
                }
            }
            else if (record == JournalRecord.AddItem)
            {
                try
                {
                    var obj = TinyhandSerializer.DeserializeObject<JournalData>(ref reader);
                    if (obj is not null)
                    {
                        if (this.IdChain.FindFirst(obj.Id) is { } old)
                        {
                            ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.RemoveFromGoshujin(old, null, false);
                            ((IStructualObject)old).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                        }
                        ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.AddToGoshujin(obj, this, false);
                        return true;
                    }
                }
                catch {}
            }
            else if (record == JournalRecord.DeleteItem)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is { } obj)
                {
                    ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.RemoveFromGoshujin(obj, null, false);
                    ((IStructualObject)obj).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                    return true;
                }
            }
            return false;
        }
        Task<bool> IStructualObject.StoreData(StoreMode storeMode) => this.GoshujinStoreData(storeMode);
        Task IStructualObject.DeleteData(DateTime forceDeleteAfter, bool writeJournal) => this.GoshujinDeleteData(forceDeleteAfter, writeJournal);
        void IStructualObject.SetupStructure(IStructualObject? parent, int key)
        {
            ((IStructualObject)this).SetParentAndKey(parent, key);
            foreach (var x in this.IdChain)
            {
                ((IStructualObject)x).SetupStructure(this);
            }
        }
    }

    public GoshujinClass? Goshujin
    {
        get => this.__gen_cl_identifier__002;
        set => ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.SetGoshujin(this, value);
    }

    private GoshujinClass? __gen_cl_identifier__002;
    static void IValueLinkObjectInternal<JournalData.GoshujinClass, JournalData>.AddToGoshujin(JournalData obj, GoshujinClass? g, bool writeJournal)
    {
        obj.__gen_cl_identifier__002 = g;
        ((IStructualObject)obj).SetupStructure(g);
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        if (g != null)
        {
            g.IdChain.Add(obj.Id, obj);
            if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
            {
                if (obj is Tinyhand.ITinyhandCustomJournal custom)
                {
                    custom.WriteCustomLocator(ref writer);
                }
                writer.Write(JournalRecord.AddItem);
                TinyhandSerializer.SerializeObject(ref writer, obj);
                root.AddJournalAndDispose(ref writer);
            }
        }
    }
    static bool IValueLinkObjectInternal<JournalData.GoshujinClass, JournalData>.RemoveFromGoshujin(JournalData obj, GoshujinClass? g, bool writeJournal)
    {
        if (obj.__gen_cl_identifier__002 == null) return g == null;
        else if (g != null && g != obj.__gen_cl_identifier__002) return false;
        obj.__gen_cl_identifier__002.IdChain.Remove(obj);
        if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
        {
            if (obj is Tinyhand.ITinyhandCustomJournal custom)
            {
                custom.WriteCustomLocator(ref writer);
            }
            writer.Write(JournalRecord.DeleteItem);
            writer.Write(obj.Id);
            root.AddJournalAndDispose(ref writer);
        }
        obj.__gen_cl_identifier__002 = null;
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        ((IStructualObject)obj).SetupStructure(null);
        return true;
    }
    static void IValueLinkObjectInternal<JournalData.GoshujinClass, JournalData>.SetGoshujin(JournalData obj, GoshujinClass? g)
    {
        if (g == obj.__gen_cl_identifier__002) return;
        ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.RemoveFromGoshujin(obj, null);
        ValueLinkInternalHelper<JournalData.GoshujinClass, JournalData>.AddToGoshujin(obj, g);
    }

    private int __gen_cl_identifier__001;

    private void __gen_cl_update_Id()
    {
        this.__gen_cl_identifier__002?.IdChain.Add(this.Id, this);
    }

    public UnorderedChain<int, JournalData>.Link IdLink;

    void IStructualObject.WriteLocator(ref TinyhandWriter writer)
    {
        if (this.Goshujin is not null)
        {
            writer.Write_Locator();
            writer.Write(this.Id);
        }
    }
}

public partial class CrystalSupplement
{

    private partial class Data
    {

        private partial class PlaneItem : IValueLinkObjectInternal<PlaneItem.GoshujinClass, PlaneItem>
        {
            public partial class GoshujinClass : IGoshujin<PlaneItem>, IEnumerable, IEnumerable<PlaneItem>, ITinyhandSerializable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>, ITinyhandReconstructable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>, ITinyhandCloneable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>, ITinyhandSerializable
            {
                public GoshujinClass()
                {
                    this.PlaneChain = new(this, static x => x.__gen_cl_identifier__002, static x => ref x.PlaneLink);
                }

                public void Add(PlaneItem x) => x.Goshujin = this;
                public bool Remove(PlaneItem x) => ValueLinkInternalHelper<PlaneItem.GoshujinClass, PlaneItem>.RemoveFromGoshujin(x, this);
                public void Clear() => ((IGoshujin)this).ClearInternal();
                void IGoshujin.ClearInternal()
                {
                    this.PlaneChain.Clear();
                }
                IEnumerable IGoshujin.GetEnumerableInternal() => this.PlaneChain;

                public UnorderedChain<uint, PlaneItem> PlaneChain { get; }

                IEnumerator<PlaneItem> IEnumerable<PlaneItem>.GetEnumerator() => this.PlaneChain.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.PlaneChain.GetEnumerator();
                public int Count => this.PlaneChain.Count;

                static void ITinyhandSerializable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>.Serialize(ref TinyhandWriter writer, scoped ref Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass? v, TinyhandSerializerOptions options)
                {
                    if (v == null)
                    {
                        writer.WriteNil();
                        return;
                    }

                    var number = 0;
                    PlaneItem[] array;
                    var max = v.PlaneChain.Count;
                    array = new PlaneItem[max];
                    foreach (var x in v.PlaneChain)
                    {
                        array[number] = x;
                        x.__gen_cl_identifier__001 = number++;
                    }

                    writer.WriteArrayHeader(2);

                    writer.WriteMapHeader(1);
                    writer.WriteString("PlaneChain"u8);
                    writer.WriteArrayHeader(v.PlaneChain.Count);
                    foreach (var x in v.PlaneChain)
                    {
                        writer.Write(x.__gen_cl_identifier__001);
                    }

                    writer.WriteArrayHeader(number);
                    var formatter = options.Resolver.GetFormatter<PlaneItem>();
                    foreach (var x in array)
                    {
                        formatter.Serialize(ref writer, x, options);
                    }
                }

                static void ITinyhandSerializable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>.Deserialize(ref TinyhandReader reader, scoped ref Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass? v, TinyhandSerializerOptions options)
                {
                    if (reader.TryReadNil())
                    {
                        return;
                    }

                    v ??= new();
                    var length = reader.ReadArrayHeader();
                    if (length < 2) throw new TinyhandException("ValueLink");

                    var chainsReader = reader.Fork();
                    reader.Skip();
                    var max = reader.ReadArrayHeader();
                    var array = new PlaneItem[max];
                    options.Security.DepthStep(ref reader);
                    try
                    {
                        var formatter = options.Resolver.GetFormatter<PlaneItem>();
                        for (var n = 0; n < max; n++)
                        {
                            array[n] = formatter.Deserialize(ref reader, options)!;
                            array[n].__gen_cl_identifier__002 = v;
                        }
                    }
                    finally { reader.Depth--; }

                    var readPlaneChain = false;

                    var numberOfData = chainsReader.ReadMapHeader2();
                    while (numberOfData-- > 0)
                    {
                        ulong key;
                        var utf8 = chainsReader.ReadStringSpan();
                        if (utf8.Length == 0)
                        {
                            goto SkipLabel;
                        }
                        key = global::Arc.Visceral.AutomataKey.GetKey(ref utf8);
                        if (utf8.Length == 0) goto SkipLabel;
                        if (key != 0x616843656E616C50) goto SkipLabel;
                        key = global::Arc.Visceral.AutomataKey.GetKey(ref utf8);
                        if (utf8.Length != 0) goto SkipLabel;
                        if (key != 0x6E69) goto SkipLabel;
                        readPlaneChain = true;
                        var len = chainsReader.ReadArrayHeader();
                        v.PlaneChain.Clear();
                        for (var n = 0; n < len; n++)
                        {
                            var i = chainsReader.ReadInt32();
                            if (i >= max) throw new IndexOutOfRangeException();
                            var x = array[i];
                            v.PlaneChain.Add(x.Plane, x);
                        }
                        continue;
SkipLabel:
                        chainsReader.Skip();
                    }

                    if (!readPlaneChain)
                    {
                        for (var n = 0; n < max; n++)
                        {
                            var x = array[n];
                            v.PlaneChain.Add(x.Plane, x);
                        }
                    }
                }

                static void ITinyhandReconstructable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>.Reconstruct([NotNull] scoped ref Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass? v, TinyhandSerializerOptions options)
                {
                    v ??= new Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass();
                }

                static Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass? ITinyhandCloneable<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>.Clone(scoped ref Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass? v, TinyhandSerializerOptions options)
                {
                    return v == null ? null : TinyhandSerializer.Deserialize<Sandbox.CrystalSupplement.Data.PlaneItem.GoshujinClass>(TinyhandSerializer.Serialize(v));
                }

                void ITinyhandSerializable.Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
                { var rt = this; TinyhandSerializer.DeserializeObject(ref reader, ref rt, options); }
                void ITinyhandSerializable.Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
                  => TinyhandSerializer.SerializeObject(ref writer, this, options);
            }

            public GoshujinClass? Goshujin
            {
                get => this.__gen_cl_identifier__002;
                set => ValueLinkInternalHelper<PlaneItem.GoshujinClass, PlaneItem>.SetGoshujin(this, value);
            }

            private GoshujinClass? __gen_cl_identifier__002;
            static void IValueLinkObjectInternal<PlaneItem.GoshujinClass, PlaneItem>.AddToGoshujin(PlaneItem obj, GoshujinClass? g, bool writeJournal)
            {
                obj.__gen_cl_identifier__002 = g;
                if (g != null)
                {
                    g.PlaneChain.Add(obj.Plane, obj);
                }
            }
            static bool IValueLinkObjectInternal<PlaneItem.GoshujinClass, PlaneItem>.RemoveFromGoshujin(PlaneItem obj, GoshujinClass? g, bool writeJournal)
            {
                if (obj.__gen_cl_identifier__002 == null) return g == null;
                else if (g != null && g != obj.__gen_cl_identifier__002) return false;
                obj.__gen_cl_identifier__002.PlaneChain.Remove(obj);
                obj.__gen_cl_identifier__002 = null;
                return true;
            }
            static void IValueLinkObjectInternal<PlaneItem.GoshujinClass, PlaneItem>.SetGoshujin(PlaneItem obj, GoshujinClass? g)
            {
                if (g == obj.__gen_cl_identifier__002) return;
                ValueLinkInternalHelper<PlaneItem.GoshujinClass, PlaneItem>.RemoveFromGoshujin(obj, null);
                ValueLinkInternalHelper<PlaneItem.GoshujinClass, PlaneItem>.AddToGoshujin(obj, g);
            }

            private int __gen_cl_identifier__001;

            private void __gen_cl_update_Plane()
            {
                this.__gen_cl_identifier__002?.PlaneChain.Add(this.Plane, this);
            }

            public UnorderedChain<uint, PlaneItem>.Link PlaneLink;

        }
    }
}

public partial record SpSecondClass : IValueLinkObjectInternal<SpSecondClass.GoshujinClass, SpSecondClass>
{
    public partial class GoshujinClass : SerializableGoshujin<SpSecondClass, GoshujinClass>, IGoshujin<SpSecondClass>, IEnumerable, IEnumerable<SpSecondClass>, ITinyhandSerializable<Sandbox.SpSecondClass.GoshujinClass>, ITinyhandReconstructable<Sandbox.SpSecondClass.GoshujinClass>, ITinyhandCloneable<Sandbox.SpSecondClass.GoshujinClass>, ITinyhandSerializable, IStructualObject, ValueLink.ISerializableSemaphore
    {
        public GoshujinClass()
        {
            this.IdChain = new(this, static x => x.__gen_cl_identifier__002, static x => ref x.IdLink);
        }

        public void Add(SpSecondClass x) => x.Goshujin = this;
        public bool Remove(SpSecondClass x) => ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.RemoveFromGoshujin(x, this);
        public void Clear() => ((IGoshujin)this).ClearInternal();
        void IGoshujin.ClearInternal()
        {
            this.IdChain.Clear();
        }
        IEnumerable IGoshujin.GetEnumerableInternal() => this.IdChain;

        public UnorderedChain<int, SpSecondClass> IdChain { get; }

        IEnumerator<SpSecondClass> IEnumerable<SpSecondClass>.GetEnumerator() => this.IdChain.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.IdChain.GetEnumerator();
        public int Count => this.IdChain.Count;

        static void ITinyhandSerializable<Sandbox.SpSecondClass.GoshujinClass>.Serialize(ref TinyhandWriter writer, scoped ref Sandbox.SpSecondClass.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (v == null)
            {
                writer.WriteNil();
                return;
            }

            var number = 0;
            SpSecondClass[] array;
            using (v.LockObject.EnterScope())
            {
                var max = v.IdChain.Count;
                array = new SpSecondClass[max];
                foreach (var x in v.IdChain)
                {
                    array[number] = x;
                    x.__gen_cl_identifier__001 = number++;
                }

                writer.WriteArrayHeader(2);

                writer.WriteMapHeader(1);
                writer.WriteString("IdChain"u8);
                writer.WriteArrayHeader(v.IdChain.Count);
                foreach (var x in v.IdChain)
                {
                    writer.Write(x.__gen_cl_identifier__001);
                }

                writer.WriteArrayHeader(number);
                var formatter = options.Resolver.GetFormatter<SpSecondClass>();
                foreach (var x in array)
                {
                    formatter.Serialize(ref writer, x, options);
                }
            }
        }

        static void ITinyhandSerializable<Sandbox.SpSecondClass.GoshujinClass>.Deserialize(ref TinyhandReader reader, scoped ref Sandbox.SpSecondClass.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return;
            }

            v ??= new();
            var length = reader.ReadArrayHeader();
            if (length < 2) throw new TinyhandException("ValueLink");

            var chainsReader = reader.Fork();
            reader.Skip();
            var max = reader.ReadArrayHeader();
            var array = new SpSecondClass[max];
            options.Security.DepthStep(ref reader);
            try
            {
                var formatter = options.Resolver.GetFormatter<SpSecondClass>();
                for (var n = 0; n < max; n++)
                {
                    array[n] = formatter.Deserialize(ref reader, options)!;
                    array[n].__gen_cl_identifier__002 = v;
                }
            }
            finally { reader.Depth--; }

            var readIdChain = false;

            var numberOfData = chainsReader.ReadMapHeader2();
            while (numberOfData-- > 0)
            {
                ulong key;
                var utf8 = chainsReader.ReadStringSpan();
                if (utf8.Length == 0)
                {
                    goto SkipLabel;
                }
                key = global::Arc.Visceral.AutomataKey.GetKey(ref utf8);
                if (utf8.Length != 0) goto SkipLabel;
                if (key != 0x6E696168436449) goto SkipLabel;
                readIdChain = true;
                var len = chainsReader.ReadArrayHeader();
                v.IdChain.Clear();
                for (var n = 0; n < len; n++)
                {
                    var i = chainsReader.ReadInt32();
                    if (i >= max) throw new IndexOutOfRangeException();
                    var x = array[i];
                    v.IdChain.Add(x.Id, x);
                }
                continue;
SkipLabel:
                chainsReader.Skip();
            }

            if (!readIdChain)
            {
                for (var n = 0; n < max; n++)
                {
                    var x = array[n];
                    v.IdChain.Add(x.Id, x);
                }
            }
        }

        static void ITinyhandReconstructable<Sandbox.SpSecondClass.GoshujinClass>.Reconstruct([NotNull] scoped ref Sandbox.SpSecondClass.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            v ??= new Sandbox.SpSecondClass.GoshujinClass();
        }

        static Sandbox.SpSecondClass.GoshujinClass? ITinyhandCloneable<Sandbox.SpSecondClass.GoshujinClass>.Clone(scoped ref Sandbox.SpSecondClass.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            return v == null ? null : TinyhandSerializer.Deserialize<Sandbox.SpSecondClass.GoshujinClass>(TinyhandSerializer.Serialize(v));
        }

        void ITinyhandSerializable.Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        { var rt = this; TinyhandSerializer.DeserializeObject(ref reader, ref rt, options); }
        void ITinyhandSerializable.Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
          => TinyhandSerializer.SerializeObject(ref writer, this, options);

        [IgnoreMember] public IStructualRoot? StructualRoot { get; set; }
        [IgnoreMember] IStructualObject? IStructualObject.StructualParent { get; set; }
        [IgnoreMember] int IStructualObject.StructualKey { get; set; } = -1;
        bool IStructualObject.ProcessJournalRecord(ref TinyhandReader reader)
        {
            if (!reader.TryReadJournalRecord(out JournalRecord record)) return false;
            if (record == JournalRecord.Locator)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is IStructualObject obj)
                {
                    return obj.ProcessJournalRecord(ref reader);
                }
            }
            else if (record == JournalRecord.AddItem)
            {
                try
                {
                    var obj = TinyhandSerializer.DeserializeObject<SpSecondClass>(ref reader);
                    if (obj is not null)
                    {
                        if (this.IdChain.FindFirst(obj.Id) is { } old)
                        {
                            ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.RemoveFromGoshujin(old, null, false);
                            ((IStructualObject)old).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                        }
                        ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.AddToGoshujin(obj, this, false);
                        return true;
                    }
                }
                catch {}
            }
            else if (record == JournalRecord.DeleteItem)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is { } obj)
                {
                    ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.RemoveFromGoshujin(obj, null, false);
                    ((IStructualObject)obj).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                    return true;
                }
            }
            return false;
        }
        Task<bool> IStructualObject.StoreData(StoreMode storeMode) => this.GoshujinStoreData(storeMode);
        Task IStructualObject.DeleteData(DateTime forceDeleteAfter, bool writeJournal) => this.GoshujinDeleteData(forceDeleteAfter, writeJournal);
        void IStructualObject.SetupStructure(IStructualObject? parent, int key)
        {
            ((IStructualObject)this).SetParentAndKey(parent, key);
            foreach (var x in this.IdChain)
            {
                ((IStructualObject)x).SetupStructure(this);
            }
        }
        private SemaphoreLock lockObject = new();
        public override SemaphoreLock LockObject => this.lockObject;
        SemaphoreLock ValueLink.ISerializableSemaphore.LockObject => this.lockObject;
    }

    public GoshujinClass? Goshujin
    {
        get => this.__gen_cl_identifier__002;
        set => ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.SetGoshujin(this, value);
    }

    private GoshujinClass? __gen_cl_identifier__002;
    static void IValueLinkObjectInternal<SpSecondClass.GoshujinClass, SpSecondClass>.AddToGoshujin(SpSecondClass obj, GoshujinClass? g, bool writeJournal)
    {
        obj.__gen_cl_identifier__002 = g;
        ((IStructualObject)obj).SetupStructure(g);
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        if (g != null)
        {
            g.IdChain.Add(obj.Id, obj);
            if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
            {
                if (obj is Tinyhand.ITinyhandCustomJournal custom)
                {
                    custom.WriteCustomLocator(ref writer);
                }
                writer.Write(JournalRecord.AddItem);
                TinyhandSerializer.SerializeObject(ref writer, obj);
                root.AddJournalAndDispose(ref writer);
            }
        }
    }
    static bool IValueLinkObjectInternal<SpSecondClass.GoshujinClass, SpSecondClass>.RemoveFromGoshujin(SpSecondClass obj, GoshujinClass? g, bool writeJournal)
    {
        if (obj.__gen_cl_identifier__002 == null) return g == null;
        else if (g != null && g != obj.__gen_cl_identifier__002) return false;
        obj.__gen_cl_identifier__002.IdChain.Remove(obj);
        if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
        {
            if (obj is Tinyhand.ITinyhandCustomJournal custom)
            {
                custom.WriteCustomLocator(ref writer);
            }
            writer.Write(JournalRecord.DeleteItem);
            writer.Write(obj.Id);
            root.AddJournalAndDispose(ref writer);
        }
        obj.__gen_cl_identifier__002 = null;
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        ((IStructualObject)obj).SetupStructure(null);
        return true;
    }
    static void IValueLinkObjectInternal<SpSecondClass.GoshujinClass, SpSecondClass>.SetGoshujin(SpSecondClass obj, GoshujinClass? g)
    {
        if (g == obj.__gen_cl_identifier__002) return;
        ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.RemoveFromGoshujin(obj, null);
        ValueLinkInternalHelper<SpSecondClass.GoshujinClass, SpSecondClass>.AddToGoshujin(obj, g);
    }

    private int __gen_cl_identifier__001;

    private void __gen_cl_update_Id()
    {
        this.__gen_cl_identifier__002?.IdChain.Add(this.Id, this);
    }

    public UnorderedChain<int, SpSecondClass>.Link IdLink;

    void IStructualObject.WriteLocator(ref TinyhandWriter writer)
    {
        if (this.Goshujin is not null)
        {
            writer.Write_Locator();
            writer.Write(this.Id);
        }
    }
}

public partial class SpClassPoint : IValueLinkObjectInternal<SpClassPoint.GoshujinClass, SpClassPoint>
{
    public partial class GoshujinClass : ReadCommittedGoshujin<int, Sandbox.SpClass, SpClassPoint,GoshujinClass>, IGoshujin, ITinyhandSerializable<Sandbox.SpClassPoint.GoshujinClass>, ITinyhandReconstructable<Sandbox.SpClassPoint.GoshujinClass>, ITinyhandCloneable<Sandbox.SpClassPoint.GoshujinClass>, ITinyhandSerializable, IStructualObject, ValueLink.IReadCommittedSemaphore
    {
        public GoshujinClass()
        {
            this.IdChain = new(this, static x => x.__gen_cl_identifier__002, static x => ref x.IdLink);
        }

        void IGoshujin.ClearInternal()
        {
            this.IdChain.Clear();
        }
        IEnumerable IGoshujin.GetEnumerableInternal() => this.IdChain;

        public UnorderedChain<int, SpClassPoint> IdChain { get; }

        public int Count => this.IdChain.Count;

        static void ITinyhandSerializable<Sandbox.SpClassPoint.GoshujinClass>.Serialize(ref TinyhandWriter writer, scoped ref Sandbox.SpClassPoint.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (v == null)
            {
                writer.WriteNil();
                return;
            }

            var number = 0;
            SpClassPoint[] array;
            using (v.LockObject.EnterScope())
            {
                var max = v.IdChain.Count;
                array = new SpClassPoint[max];
                foreach (var x in v.IdChain)
                {
                    array[number] = x;
                    x.__gen_cl_identifier__001 = number++;
                }

                writer.WriteArrayHeader(2);

                writer.WriteMapHeader(1);
                writer.WriteString("IdChain"u8);
                writer.WriteArrayHeader(v.IdChain.Count);
                foreach (var x in v.IdChain)
                {
                    writer.Write(x.__gen_cl_identifier__001);
                }

                writer.WriteArrayHeader(number);
                var formatter = options.Resolver.GetFormatter<SpClassPoint>();
                foreach (var x in array)
                {
                    formatter.Serialize(ref writer, x, options);
                }
            }
        }

        static void ITinyhandSerializable<Sandbox.SpClassPoint.GoshujinClass>.Deserialize(ref TinyhandReader reader, scoped ref Sandbox.SpClassPoint.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return;
            }

            v ??= new();
            var length = reader.ReadArrayHeader();
            if (length < 2) throw new TinyhandException("ValueLink");

            var chainsReader = reader.Fork();
            reader.Skip();
            var max = reader.ReadArrayHeader();
            var array = new SpClassPoint[max];
            options.Security.DepthStep(ref reader);
            try
            {
                var formatter = options.Resolver.GetFormatter<SpClassPoint>();
                for (var n = 0; n < max; n++)
                {
                    array[n] = formatter.Deserialize(ref reader, options)!;
                    array[n].__gen_cl_identifier__002 = v;
                }
            }
            finally { reader.Depth--; }

            var readIdChain = false;

            var numberOfData = chainsReader.ReadMapHeader2();
            while (numberOfData-- > 0)
            {
                ulong key;
                var utf8 = chainsReader.ReadStringSpan();
                if (utf8.Length == 0)
                {
                    goto SkipLabel;
                }
                key = global::Arc.Visceral.AutomataKey.GetKey(ref utf8);
                if (utf8.Length != 0) goto SkipLabel;
                if (key != 0x6E696168436449) goto SkipLabel;
                readIdChain = true;
                var len = chainsReader.ReadArrayHeader();
                v.IdChain.Clear();
                for (var n = 0; n < len; n++)
                {
                    var i = chainsReader.ReadInt32();
                    if (i >= max) throw new IndexOutOfRangeException();
                    var x = array[i];
                    v.IdChain.Add(x.Id, x);
                }
                continue;
SkipLabel:
                chainsReader.Skip();
            }

            if (!readIdChain)
            {
                for (var n = 0; n < max; n++)
                {
                    var x = array[n];
                    v.IdChain.Add(x.Id, x);
                }
            }
        }

        static void ITinyhandReconstructable<Sandbox.SpClassPoint.GoshujinClass>.Reconstruct([NotNull] scoped ref Sandbox.SpClassPoint.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            v ??= new Sandbox.SpClassPoint.GoshujinClass();
        }

        static Sandbox.SpClassPoint.GoshujinClass? ITinyhandCloneable<Sandbox.SpClassPoint.GoshujinClass>.Clone(scoped ref Sandbox.SpClassPoint.GoshujinClass? v, TinyhandSerializerOptions options)
        {
            return v == null ? null : TinyhandSerializer.Deserialize<Sandbox.SpClassPoint.GoshujinClass>(TinyhandSerializer.Serialize(v));
        }

        void ITinyhandSerializable.Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        { var rt = this; TinyhandSerializer.DeserializeObject(ref reader, ref rt, options); }
        void ITinyhandSerializable.Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
          => TinyhandSerializer.SerializeObject(ref writer, this, options);

        [IgnoreMember] public IStructualRoot? StructualRoot { get; set; }
        [IgnoreMember] IStructualObject? IStructualObject.StructualParent { get; set; }
        [IgnoreMember] int IStructualObject.StructualKey { get; set; } = -1;
        bool IStructualObject.ProcessJournalRecord(ref TinyhandReader reader)
        {
            if (!reader.TryReadJournalRecord(out JournalRecord record)) return false;
            if (record == JournalRecord.Locator)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is IStructualObject obj)
                {
                    return obj.ProcessJournalRecord(ref reader);
                }
            }
            else if (record == JournalRecord.AddItem)
            {
                try
                {
                    var obj = TinyhandSerializer.DeserializeObject<SpClassPoint>(ref reader);
                    if (obj is not null)
                    {
                        if (this.IdChain.FindFirst(obj.Id) is { } old)
                        {
                            ValueLinkInternalHelper<SpClassPoint.GoshujinClass, SpClassPoint>.RemoveFromGoshujin(old, null, false);
                            ((IStructualObject)old).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                        }
                        ValueLinkInternalHelper<SpClassPoint.GoshujinClass, SpClassPoint>.AddToGoshujin(obj, this, false);
                        return true;
                    }
                }
                catch {}
            }
            else if (record == JournalRecord.DeleteItem)
            {
                var key = reader.ReadInt32();
                if (this.IdChain.FindFirst(key) is { } obj)
                {
                    ValueLinkInternalHelper<SpClassPoint.GoshujinClass, SpClassPoint>.RemoveFromGoshujin(obj, null, false);
                    ((IStructualObject)obj).DeleteData().ConfigureAwait(false).GetAwaiter().GetResult();
                    return true;
                }
            }
            return false;
        }
        Task<bool> IStructualObject.StoreData(StoreMode storeMode) => this.GoshujinStoreData(storeMode);
        Task IStructualObject.DeleteData(DateTime forceDeleteAfter, bool writeJournal) => this.GoshujinDeleteData(forceDeleteAfter, writeJournal);
        void IStructualObject.SetupStructure(IStructualObject? parent, int key)
        {
            ((IStructualObject)this).SetParentAndKey(parent, key);
            foreach (var x in this.IdChain)
            {
                ((IStructualObject)x).SetupStructure(this);
            }
        }
        private Lock lockObject = new();
        public override Lock LockObject => this.lockObject;
        Lock ValueLink.IReadCommittedSemaphore.LockObject => this.lockObject;
        protected override SpClassPoint? FindObject(int key) => this.IdChain.FindFirst(key);
        protected override SpClassPoint NewObject(int key)
        {
            var obj = new SpClassPoint();
            ((IStructualObject)obj).SetupStructure(this);
            obj.Id = key;
            return obj;
        }
    }

    public GoshujinClass? Goshujin
    {
        get => this.__gen_cl_identifier__002;
    }

    private GoshujinClass? __gen_cl_identifier__002;
    static void IValueLinkObjectInternal<SpClassPoint.GoshujinClass, SpClassPoint>.AddToGoshujin(SpClassPoint obj, GoshujinClass? g, bool writeJournal)
    {
        obj.__gen_cl_identifier__002 = g;
        ((IStructualObject)obj).SetupStructure(g);
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        if (g != null)
        {
            g.IdChain.Add(obj.Id, obj);
            if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
            {
                if (obj is Tinyhand.ITinyhandCustomJournal custom)
                {
                    custom.WriteCustomLocator(ref writer);
                }
                writer.Write(JournalRecord.AddItem);
                TinyhandSerializer.SerializeObject(ref writer, obj);
                root.AddJournalAndDispose(ref writer);
            }
        }
    }
    static bool IValueLinkObjectInternal<SpClassPoint.GoshujinClass, SpClassPoint>.RemoveFromGoshujin(SpClassPoint obj, GoshujinClass? g, bool writeJournal)
    {
        if (obj.__gen_cl_identifier__002 == null) return g == null;
        else if (g != null && g != obj.__gen_cl_identifier__002) return false;
        obj.__gen_cl_identifier__002.IdChain.Remove(obj);
        if (writeJournal && ((IStructualObject)obj).TryGetJournalWriter(out var root, out var writer, false))
        {
            if (obj is Tinyhand.ITinyhandCustomJournal custom)
            {
                custom.WriteCustomLocator(ref writer);
            }
            writer.Write(JournalRecord.DeleteItem);
            writer.Write(obj.Id);
            root.AddJournalAndDispose(ref writer);
        }
        obj.__gen_cl_identifier__002 = null;
        ((IStructualObject)obj).StructualRoot?.AddToSaveQueue();
        ((IStructualObject)obj).SetupStructure(null);
        return true;
    }
    static void IValueLinkObjectInternal<SpClassPoint.GoshujinClass, SpClassPoint>.SetGoshujin(SpClassPoint obj, GoshujinClass? g)
    {
        if (g == obj.__gen_cl_identifier__002) return;
        ValueLinkInternalHelper<SpClassPoint.GoshujinClass, SpClassPoint>.RemoveFromGoshujin(obj, null);
        ValueLinkInternalHelper<SpClassPoint.GoshujinClass, SpClassPoint>.AddToGoshujin(obj, g);
    }

    private int __gen_cl_identifier__001;

    private void __gen_cl_update_Id()
    {
        this.__gen_cl_identifier__002?.IdChain.Add(this.Id, this);
    }

    public UnorderedChain<int, SpClassPoint>.Link IdLink;

    public override Task DeleteData(DateTime forceDeleteAfter = default, bool writeJournal = true)
    {
        if (this.Goshujin is { } goshujin) return goshujin.Delete(this.Id, forceDeleteAfter);
        else return ((IDataLocker<Sandbox.SpClass>)this).DeletePoint(forceDeleteAfter, false);
    }
    void IStructualObject.WriteLocator(ref TinyhandWriter writer)
    {
        if (this.Goshujin is not null)
        {
            writer.Write_Locator();
            writer.Write(this.Id);
        }
    }
}
public static partial class StoragePointHelper
{
    public static ValueTask<SpClassPoint?> Find(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, CancellationToken cancellationToken = default) => Find(storagePoint, key, ValueLinkGlobal.LockTimeout, cancellationToken);
    public static async ValueTask<SpClassPoint?> Find(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, TimeSpan timeout, CancellationToken cancellationToken = default)
    {
        using (var scope = await storagePoint.TryLock(AcquisitionMode.Get, timeout, cancellationToken).ConfigureAwait(false))
        {
            if (scope.Data is { } g) return g.Find(key, AcquisitionMode.Get);
            else return default;
        }
    }
    public static ValueTask<Sandbox.SpClass?> TryGet(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, CancellationToken cancellationToken = default) => TryGet(storagePoint, key, ValueLinkGlobal.LockTimeout, cancellationToken);
    public static async ValueTask<Sandbox.SpClass?> TryGet(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, TimeSpan timeout, CancellationToken cancellationToken = default)
    {
        var g = await storagePoint.TryGet().ConfigureAwait(false);
        if (g is null) return default;
        else return await g.TryGet(key, timeout, cancellationToken).ConfigureAwait(false);
    }
    public static ValueTask<DataScope<Sandbox.SpClass>> TryLock(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, AcquisitionMode acquisitionMode, CancellationToken cancellationToken = default) => TryLock(storagePoint, key, acquisitionMode, ValueLinkGlobal.LockTimeout, cancellationToken);
    public static async ValueTask<DataScope<Sandbox.SpClass>> TryLock(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, AcquisitionMode acquisitionMode, TimeSpan timeout, CancellationToken cancellationToken = default)
    {
        SpClassPoint? point = default;
        using (var scope = await storagePoint.TryLock(AcquisitionMode.GetOrCreate, timeout, cancellationToken).ConfigureAwait(false))
        {
            if (scope.Data is { } g) point = g.Find(key, acquisitionMode);
            else return new(scope.Result);
        }
        if (point is null) return new(DataScopeResult.NotFound);
        else return await point.TryLock(AcquisitionMode.GetOrCreate, timeout, cancellationToken).ConfigureAwait(false);
    }
    public static Task<DataScopeResult> Delete(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, DateTime forceDeleteAfter = default) => Delete(storagePoint, key, ValueLinkGlobal.LockTimeout, default, forceDeleteAfter);
    public static async Task<DataScopeResult> Delete(this CrystalData.StoragePoint<Sandbox.SpClassPoint.GoshujinClass> storagePoint, int key, TimeSpan timeout, CancellationToken cancellationToken = default, DateTime forceDeleteAfter = default)
    {
        using (var scope = await storagePoint.TryLock(AcquisitionMode.Get, timeout, cancellationToken).ConfigureAwait(false))
        {
            if (scope.Data is { } g) return await g.Delete(key, forceDeleteAfter).ConfigureAwait(false);
            else return scope.Result;
        }
    }
}
